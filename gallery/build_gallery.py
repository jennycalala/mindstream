#!/usr/bin/env python3
"""
Build a static gallery page from images in cache/images/.

Usage (PowerShell):
    py .\gallery\build_gallery.py

This writes .\gallery\index.html, which you can open in your browser.
"""

import os
import glob
from datetime import datetime


def find_images(images_dir: str) -> list[tuple[str, str, str]]:
    """Return list of tuples (abs_path, rel_name, caption) sorted by date desc if parseable.

    - rel_name is the filename (e.g., 2025-08-11_gpt_realistic.png)
    - caption is the filename without extension
    """
    paths = sorted(glob.glob(os.path.join(images_dir, "*.png")))
    items: list[tuple[str, str, str]] = []
    for p in paths:
        name = os.path.basename(p)
        caption = os.path.splitext(name)[0]
        items.append((p, name, caption))

    def sort_key(item):
        name = item[1]
        # Expect YYYY-MM-DD_... prefix; fallback to file mtime
        try:
            date_str = name.split("_")[0]
            dt = datetime.strptime(date_str, "%Y-%m-%d")
            return (dt, name)
        except Exception:
            return (datetime.fromtimestamp(os.path.getmtime(item[0])), name)

    items.sort(key=sort_key, reverse=True)
    return items


def build_html(images: list[tuple[str, str, str]], images_dir: str, out_path: str) -> None:
    gallery_dir = os.path.dirname(out_path)
    rows = []
    for abs_path, name, caption in images:
        src_rel = os.path.relpath(abs_path, start=gallery_dir)
        rows.append(
            f"""
            <figure class="card">
                <a href="{src_rel}" target="_blank" rel="noopener">
                    <img loading="lazy" src="{src_rel}" alt="{caption}" />
                </a>
                <figcaption>{caption}</figcaption>
            </figure>
            """.strip()
        )

    html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Mindstream Gallery</title>
    <style>
        :root {{
            --bg: #0f1115; --fg: #e7e9ee; --muted: #9aa1ad; --card: #1a1f27; --accent: #6aa6ff;
        }}
        * {{ box-sizing: border-box; }}
        body {{ margin: 0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; background: var(--bg); color: var(--fg); }}
        header {{ padding: 20px 24px; position: sticky; top: 0; background: linear-gradient(180deg, rgba(15,17,21,0.95), rgba(15,17,21,0.6) 70%, rgba(15,17,21,0)); backdrop-filter: saturate(1.2) blur(6px); }}
        header h1 {{ margin: 0; font-size: 20px; font-weight: 600; }}
        header .hint {{ color: var(--muted); font-size: 13px; margin-top: 4px; }}
        main {{ padding: 16px 24px 40px; }}
        .grid {{
            display: grid; gap: 14px;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        }}
        .card {{ background: var(--card); border-radius: 10px; padding: 10px; border: 1px solid rgba(255,255,255,0.06); }}
        .card img {{ width: 100%; height: 180px; object-fit: cover; border-radius: 6px; display: block; }}
        figcaption {{ margin-top: 8px; font-size: 12px; color: var(--muted); word-break: break-word; }}
        footer {{ padding: 24px; text-align: center; color: var(--muted); font-size: 12px; }}
        a {{ color: var(--accent); text-decoration: none; }}
        a:hover {{ text-decoration: underline; }}
    </style>
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'%3E%3Ccircle cx='32' cy='32' r='28' fill='%236aa6ff'/%3E%3C/svg%3E" />
</head>
<body>
    <header>
        <h1>Mindstream Gallery</h1>
        <div class="hint">Images from <code>cache/images/</code>. Click any tile to open full size in a new tab.</div>
    </header>
    <main>
        <section class="grid">
            {''.join(rows)}
        </section>
    </main>
    <footer>
        Built locally · {len(images)} image(s)
    </footer>
    
    <script>
        // Optional: scroll restoration within the static page
        if ('scrollRestoration' in history) {{ history.scrollRestoration = 'auto'; }}
    </script>
    
    <!-- Generated by build_gallery.py -->
    
    
</body>
</html>
"""
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(html)


def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    repo_root = os.path.dirname(script_dir)
    images_dir = os.path.join(repo_root, "cache", "images")
    out_path = os.path.join(script_dir, "index.html")

    os.makedirs(images_dir, exist_ok=True)
    images = find_images(images_dir)
    build_html(images, images_dir, out_path)
    print(f"Wrote → {os.path.relpath(out_path, start=repo_root)}  ({len(images)} images)")


if __name__ == "__main__":
    main()


